import logging
import json
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatPermissions
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler
import random
import threading
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
from datetime import datetime
import re
import os

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä—ã–Ω–∫–∞
user_data = {}
marketplace = []
# Define the bank file path
BANK_FILE = 'bank.json'


def load_bank_data():
    if os.path.exists(BANK_FILE):
        with open(BANK_FILE, 'r') as file:
            return json.load(file)
    else:
        return {}


# Function to save bank data
def save_bank_data(bank_data):
    with open(BANK_FILE, 'w') as file:
        json.dump(bank_data, file)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def save_data():
    try:
        with open('user_data.json', 'w') as file:
            json.dump(user_data, file, indent=4)
            logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: %s", user_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")


def save_market():
    try:
        with open('marketplace.json', 'w') as file:
            json.dump(marketplace, file, indent=4)
        logger.info("–î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞: {e}")


def load_data():
    global user_data
    try:
        with open('user_data.json', 'r') as file:
            loaded_data = json.load(file)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç –≤ int
            user_data = {int(user_id): data for user_id, data in loaded_data.items()}
            logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: %s", user_data)
    except FileNotFoundError:
        user_data = {}
        logger.warning("–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.")
    except Exception as e:
        user_data = {}
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")


def load_market():
    global marketplace
    try:
        with open('marketplace.json', 'r') as file:
            marketplace = json.load(file)
    except FileNotFoundError:
        marketplace = []


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
def kick(update: Update, context: CallbackContext) -> None:
    user = update.message.reply_to_message.from_user
    context.bot.kick_chat_member(update.message.chat_id, user.id)
    update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω.')
    if user.id not in user_data:
        user_data[user.id] = {'mutes': 0, 'bans': 0, 'money': 0, 'last_farm': 0, 'items': []}
    user_data[user.id]['bans'] += 1
    save_data()
# —Å—É–∫–∞ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –æ—Ç–∫—É–¥–∞ –≤—ã —Ç–∞–∫–∏–µ –µ–±–∞–Ω–∞—Ç—ã —á—Ç–æ –µ–º—É –≤–µ—Ä–∏—Ç–µ. –æ–Ω –ø—Ä–æ—Å—Ç–æ —Ä–æ—Ñ–ª–∏—Ç

def ban(update: Update, context: CallbackContext) -> None:
    user = update.message.reply_to_message.from_user
    context.bot.ban_chat_member(update.message.chat_id, user.id)
    update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.')
    if user.id not in user_data:
        user_data[user.id] = {'mutes': 0, 'bans': 0, 'money': 0, 'last_farm': 0, 'items': []}
    user_data[user.id]['bans'] += 1
    save_data()


def unban(update: Update, context: CallbackContext) -> None:
    user_id = int(context.args[0])
    context.bot.unban_chat_member(update.message.chat_id, user_id)
    update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.')


def mute(update: Update, context: CallbackContext) -> None:
    user = update.message.reply_to_message.from_user
    context.bot.restrict_chat_member(update.message.chat_id, user.id,
                                     permissions=ChatPermissions(can_send_messages=False))
    update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –±—ã–ª –∑–∞–º—å—é—á–µ–Ω.')
    if user.id not in user_data:
        user_data[user.id] = {'mutes': 0, 'bans': 0, 'money': 0, 'last_farm': 0, 'items': []}
    user_data[user.id]['mutes'] += 1
    save_data()


def unmute(update: Update, context: CallbackContext) -> None:
    user = update.message.reply_to_message.from_user
    context.bot.restrict_chat_member(update.message.chat_id, user.id,
                                     permissions=ChatPermissions(can_send_messages=True))
    update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –±—ã–ª —Ä–∞–∑–º—å—é—á–µ–Ω.')


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π –∏ –º–∏–Ω–∏-–∏–≥—Ä
def roll_dice(update: Update, context: CallbackContext) -> None:
    number = random.randint(1, 6)
    update.message.reply_text(f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {number}')


def flip_coin(update: Update, context: CallbackContext) -> None:
    result = '–æ—Ä–µ–ª' if random.random() < 0.5 else '—Ä–µ—à–∫–∞'
    update.message.reply_text(f'–ú–æ–Ω–µ—Ç–∫–∞ —É–ø–∞–ª–∞: {result}')


def guess_number(update: Update, context: CallbackContext) -> None:
    number = random.randint(1, 10)
    update.message.reply_text(f'–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!')
    context.user_data['number'] = number


def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç, —è —á–∞—Ç-–±–æ—Ç –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è. –º–æ–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥')


def help_command(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        'üë¢ /kick - –ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n'
        'üö´ /ban - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n'
        '‚õîÔ∏è /unban - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n'
        'üîá /mute - –ó–∞–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n'
        'üîä /unmute - –†–∞–∑–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n'
        'üé≤ /roll_dice - –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫\n'
        'ü™ô /flip_coin - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É\n'
        'üì¢ /everyone - –£–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö\n'
        'üí∞ /ferma - –ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Ä–∞–∑ –≤ 4 —á–∞—Å–∞\n'
        'üìä /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n'
        'üõí /prodavat - –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /prodavat –ú–∞—à–∏–Ω–∞ 1000)\n'
        'üè™ /rynok - –ü–æ–∫–∞–∑–∞—Ç—å —Ä—ã–Ω–æ–∫\n'
        'üí∏ /send - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send 100 (–∞–π–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞)\n'
        '‚ùì /help - –ü–æ–º–æ—â—å\n'
        'üëÄ /grabit - –û–≥—Ä–∞–±–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grabit (–∞–π–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞)\n'
        'üì° /check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞ –Ω–∞ –ø–∏–Ω–≥\n'
        'üîç /probit - –ü—Ä–æ–±–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –±–∞–∑–µ –±–æ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /probit (–∞–π–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞)\n'
        'üé∞ /kazino - –û–±—ã—á–Ω–æ–µ –∫–∞–∑–∏–Ω–æ(–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /kazino (—Å—Ç–∞–≤–∫–∞)\n'
        'üî¥ /ruletka - –ö–∞–∑–∏–Ω–æ —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ruletka (—Å—Ç–∞–≤–∫–∞) (–≤–∞—à–µ —á–∏—Å–ª–æ)\n'
        'üí∏/vbank - –ü–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /vbank (—Å—É–º–º–∞)\n'
        'üí∏/izbank - –≤–∑—è—Ç—å –¥–µ–Ω—å–≥–∏ –∏–∑ –±–∞–Ω–∫–∞ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /izbank (—Å—É–º–º–∞)\n'
        'üìä/bank - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫–µ\n'
    )


def kazino_X(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    user_id = user.id

    if user_id not in user_data:
        user_data[user_id] = {'money': 100}

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫—É –∏ —á–∏—Å–ª–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è
        bet_amount, guess_number = map(int, context.args)
        if bet_amount <= 0:
            update.message.reply_text('‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.')
            return
        if user_data[user_id]['money'] < bet_amount:
            update.message.reply_text('üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.')
            return
        if guess_number < 1 or guess_number > 10:
            update.message.reply_text('‚ùó –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10.')
            return

        # –ó–∞–≥–∞–¥—ã–≤–∞–µ–º —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10
        secret_number = random.randint(1, 10)

        if guess_number == secret_number:
            # –ï—Å–ª–∏ —á–∏—Å–ª–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–≥–∞–¥–∞–Ω–Ω—ã–º —á–∏—Å–ª–æ–º, –≤—ã–∏–≥—Ä—ã—à —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ —Ç—Ä–∏ —Ä–∞–∑–∞
            win_amount = bet_amount * 3
            user_data[user_id]['money'] += win_amount
            update.message.reply_text(
                f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} –º–æ–Ω–µ—Ç. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_data[user_id]["money"]} –º–æ–Ω–µ—Ç.')
        else:
            user_data[user_id]['money'] -= bet_amount
            update.message.reply_text(
                f'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ {secret_number}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet_amount} –º–æ–Ω–µ—Ç. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_data[user_id]["money"]} –º–æ–Ω–µ—Ç.')

        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
    except (IndexError, ValueError):
        update.message.reply_text('‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ruletka [—Å—Ç–∞–≤–∫–∞] [–ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 10]')


def everyone(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    members = context.bot.get_chat_administrators(chat_id)
    mention_text = "üì¢ –£–ø–æ–º–∏–Ω–∞—é –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
    for member in members:
        user = member.user
        mention_text += f"@{user.username or user.first_name}, "
    update.message.reply_text(mention_text.strip(', '))

def farm(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    user_id = user.id
    if user_id not in user_data:
        user_data[user_id] = {'mutes': 0, 'bans': 0, 'money': 0, 'last_farm': 0, 'items': []}

    current_time = time.time()
    last_farm_time = user_data[user_id]['last_farm']
    if current_time - last_farm_time >= 2 * 3600:
        ferma = random.randint(1, 150)
        user_data[user_id]['money'] += ferma
        user_data[user_id]['last_farm'] = current_time
        update.message.reply_text(f'üåæ –ö—Ä—É—Ç–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {ferma} –º–æ–Ω–µ—Ç.')
        save_data()
    else:
        time_left = 2 * 3600 - (current_time - last_farm_time)
        hours, remainder = divmod(time_left, 3600)
        minutes, seconds = divmod(remainder, 60)
        update.message.reply_text(
            f'‚è≥ –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –º–æ–Ω–µ—Ç—ã –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {int(hours)}—á {int(minutes)}–º {int(seconds)}—Å.')


# –ü—Ä–∏–º–µ—Ä user_data, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≥–¥–µ-—Ç–æ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ

def grabit(update: Update, context: CallbackContext) -> None:
    sender = update.message.from_user
    sender_id = sender.id

    if sender_id not in user_data:
        user_data[sender_id] = {'mutes': 0, 'bans': 0, 'money': 0, 'last_farm': 0, 'items': [], 'last_grabit': 0}

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if len(context.args) < 1:
            update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grabit [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]')
            return

        recipient_id = int(context.args[0])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
        try:
            recipient = context.bot.get_chat_member(update.message.chat_id, recipient_id).user
        except:
            update.message.reply_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return

        if recipient_id not in user_data:
            user_data[recipient_id] = {'mutes': 0, 'bans': 0, 'money': 0, 'last_farm': 0, 'items': [], 'last_grabit': 0}

        current_time = time.time()
        if current_time - user_data[sender_id].get('last_grabit', 0) < 3700:  # 2 —á–∞—Å–∞ = 7200 —Å–µ–∫—É–Ω–¥
            update.message.reply_text('–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 3700 —Å–µ–∫.')
            return

        if user_data[recipient_id]['money'] > 0:
            stolen_amount = random.randint(1, user_data[recipient_id]['money'])
            user_data[sender_id]['money'] += stolen_amount
            user_data[recipient_id]['money'] -= stolen_amount
            user_data[sender_id]['last_grabit'] = current_time
            update.message.reply_text(f'üí∞ –í—ã –æ–≥—Ä–∞–±–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {recipient_id} –Ω–∞ {stolen_amount} –º–æ–Ω–µ—Ç.')
            save_data()
        else:
            update.message.reply_text('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è.')
    except (IndexError, ValueError):
        update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grabit [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]')
    except Exception as e:
        update.message.reply_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')


def user_info(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    user_id = user.id
    if user_id not in user_data:
        user_data[user_id] = {'mutes': 0, 'bans': 0, 'money': 0, 'last_farm': 0, 'items': [], 'businesses': []}

    user_stats = user_data[user_id]
    items = ", ".join(user_stats.get('items', [])) if 'items' in user_stats else "–Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤"

    businesses = user_stats.get('businesses', [])
    if businesses:
        business_names = [business['name'] for business in
                          businesses]  # Assuming each business is a dict with a 'name' key
        business_list = ", ".join(business_names)
    else:
        business_list = "–Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤"

    update.message.reply_text(
        f'üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name}:\n'
        f'üîá –ú—å—é—Ç—ã: {user_stats.get("mutes", 0)}\n'
        f'üö´ –ë–∞–Ω—ã: {user_stats.get("bans", 0)}\n'
        f'üí∏ –î–µ–Ω—å–≥–∏: {user_stats.get("money", 0)}\n'
        f'üéÅ –ü—Ä–µ–¥–º–µ—Ç—ã: {items}\n'

    )

def sell_item(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    user_id = user.id
    if user_id not in user_data:
        user_data[user_id] = {'mutes': 0, 'bans': 0, 'money': 0, 'last_farm': 0, 'items': []}

    try:
        item_name = context.args[0]
        item_price = int(context.args[1])
        marketplace.append({'seller_id': user_id, 'item': item_name, 'price': item_price})
        update.message.reply_text(f'üõí –ü—Ä–µ–¥–º–µ—Ç "{item_name}" –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Ä—ã–Ω–æ–∫ –∑–∞ {item_price} –º–æ–Ω–µ—Ç.')
        save_market()
    except (IndexError, ValueError):
        update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /prodavat [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞] [—Ü–µ–Ω–∞]')


def show_market(update: Update, context: CallbackContext) -> None:
    if not marketplace:
        update.message.reply_text('üì¶ –†—ã–Ω–æ–∫ –ø—É—Å—Ç!')
        return

    for item in marketplace:
        seller_id = item.get("seller_id", None)
        if seller_id is not None:
            button = InlineKeyboardButton(text=f'–ö—É–ø–∏—Ç—å –∑–∞ {item["price"]}',
                                          callback_data=f'buy_{item["item"]}_{seller_id}')
            keyboard = InlineKeyboardMarkup([[button]])
            update.message.reply_text(f'üè™ –í–ª–∞–¥–µ–ª–µ—Ü: {seller_id}\n–ü—Ä–µ–¥–º–µ—Ç: {item["item"]}\n–¶–µ–Ω–∞: {item["price"]} –º–æ–Ω–µ—Ç',
                                      reply_markup=keyboard)


def buy_item(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()

    data = query.data.split('_')

    if len(data) < 3:
        query.message.reply_text('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏.')
        return

    try:
        seller_id = int(data[2])
    except ValueError:
        query.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥–∞–≤—Ü–∞.')
        return

    buyer = query.from_user
    buyer_id = buyer.id

    for item in marketplace:
        if item['item'] == data[1] and item['seller_id'] == seller_id:
            if buyer_id not in user_data:
                user_data[buyer_id] = {'mutes': 0, 'bans': 0, 'money': 0, 'last_farm': 0, 'items': []}

            if user_data[buyer_id]['money'] >= item['price']:
                user_data[buyer_id]['money'] -= item['price']
                user_data[buyer_id]['items'].append(item['item'])
                user_data[seller_id]['money'] += item['price']
                marketplace.remove(item)
                query.message.reply_text(f'üéâ –í—ã –∫—É–ø–∏–ª–∏ "{item["item"]}" –∑–∞ {item["price"]} –º–æ–Ω–µ—Ç.')
                save_data()
                save_market()
            else:
                query.message.reply_text('‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.')
            return
    query.message.reply_text('‚ùå –≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –±—ã–ª –∫—É–ø–ª–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.')


def send_money(update: Update, context: CallbackContext) -> None:
    sender = update.message.from_user
    sender_id = sender.id
    if sender_id not in user_data:
        user_data[sender_id] = {'mutes': 0, 'bans': 0, 'money': 0, 'last_farm': 0, 'items': []}

    try:
        if len(context.args) < 2:
            update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send [—Å—É–º–º–∞] [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]')
            return

        amount = int(context.args[0])
        recipient_id = int(context.args[1])

        try:
            recipient = context.bot.get_chat_member(update.message.chat_id, recipient_id).user
        except:
            update.message.reply_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return

        if recipient_id not in user_data:
            user_data[recipient_id] = {'mutes': 0, 'bans': 0, 'money': 0, 'last_farm': 0, 'items': []}

        if user_data[sender_id]['money'] >= amount:
            user_data[sender_id]['money'] -= amount
            user_data[recipient_id]['money'] += amount
            update.message.reply_text(f'üí∏ –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {recipient_id}.')
            save_data()
        else:
            update.message.reply_text('‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.')
    except (IndexError, ValueError):
        update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send [—Å—É–º–º–∞] [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]')
    except Exception as e:
        update.message.reply_text(f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')


def probit(update: Update, context: CallbackContext) -> None:
    if context.args:
        user_id = context.args[0]
        try:
            user_id = int(user_id)
            if user_id in user_data:
                user_stats = user_data[user_id]
                username = context.bot.get_chat(user_id).username or '–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'

                # Retrieve items and businesses
                items = user_stats.get('items', [])
                item_count = len(items)

                businesses = user_stats.get('businesses', [])
                business_names = [business['name'] for business in businesses] if businesses else []
                business_count = len(businesses)

                update.message.reply_text(f'üîç –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}')
                update.message.reply_text(
                    f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}\n'
                    f'üí∏ –î–µ–Ω—å–≥–∏: {user_stats.get("money", 0)}\n'
                    f'üîá –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É—Ç–æ–≤: {user_stats.get("mutes", 0)}\n'
                    f'üö´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–æ–≤: {user_stats.get("bans", 0)}\n'
                    f'üéÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {item_count}\n'

                )
            else:
                update.message.reply_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        except ValueError:
            update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
    else:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')

def check(update: Update, context: CallbackContext) -> None:
    start_time = time.time()
    message = update.message.reply_text('–ù–∞ –º–µ—Å—Ç–µ! ‚úÖ')
    end_time = time.time()

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–∏–Ω–≥–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    ping = (end_time - start_time) * 1000
    message.edit_text(f'–ù–∞ –º–µ—Å—Ç–µ! ‚úÖ\n–ü–∏–Ω–≥: {ping:.2f} ms')


def kazino(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    user_id = user.id

    if user_id not in user_data:
        user_data[user_id] = {'money': 100}

    try:
        bet_amount = int(context.args[0])
        if bet_amount <= 0:
            update.message.reply_text('–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.')
            return
        if user_data[user_id]['money'] < bet_amount:
            update.message.reply_text('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.')
            return

        # "–ë—Ä–æ—Å–∞–µ–º –º–æ–Ω–µ—Ç—É" - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ 0 –∏–ª–∏ 1
        result = random.randint(0, 1)

        if result == 1:
            user_data[user_id]['money'] += bet_amount  # –ï—Å–ª–∏ –≤—ã–∏–≥—Ä—ã—à, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –∫ –¥–µ–Ω—å–≥–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update.message.reply_text(
                f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {bet_amount} –º–æ–Ω–µ—Ç. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_data[user_id]["money"]} –º–æ–Ω–µ—Ç.')
        else:
            user_data[user_id]['money'] -= bet_amount  # –ï—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à, –≤—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ –¥–µ–Ω–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update.message.reply_text(
                f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet_amount} –º–æ–Ω–µ—Ç. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_data[user_id]["money"]} –º–æ–Ω–µ—Ç.')
        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
    except (IndexError, ValueError):
        update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /kazino [—Å—Ç–∞–≤–∫–∞]')



def give(update, context):
    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    args = context.args
    if len(args) != 2:
        update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give [—Å—É–º–º–∞] [–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]')
        return

    try:
        amount = float(args[0])
        user_id = int(args[1])
    except ValueError:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É –∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É
    allowed_user_id = 6468904613  # –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–¥–µ—Å—å
    if update.message.from_user.id != allowed_user_id:
        update.message.reply_text('–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')
        return

    # –í—ã–¥–∞—á–∞ —Å—É–º–º—ã —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if user_id in user_data:
        user_data[user_id]['money'] += amount
        update.message.reply_text(f'–°—É–º–º–∞ {amount} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∞–π–¥–∏ {user_id}.')
        save_data()
    else:
        update.message.reply_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –±–∞–Ω–∫–µ
def bank(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    user_id = user.id

    bank_data = load_bank_data()
    if str(user_id) in bank_data:
        bank_balance = bank_data[str(user_id)]
        update.message.reply_text(f'üè¶ –í–∞—à –±–∞–ª–∞–Ω—Å –≤ –±–∞–Ω–∫–µ: {bank_balance} –º–æ–Ω–µ—Ç.')
    else:
        update.message.reply_text('üè¶ –£ –≤–∞—Å –Ω–µ—Ç –¥–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫–µ.')


def izbank(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    user_id = user.id

    if user_id not in user_data:
        user_data[user_id] = {'money': 100}

    try:
        amount = int(context.args[0])
        if amount <= 0:
            update.message.reply_text('‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.')
            return

        bank_data = load_bank_data()
        if str(user_id) not in bank_data or bank_data[str(user_id)] < amount:
            update.message.reply_text('üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫–µ –¥–ª—è –≤—ã–≤–æ–¥–∞.')
            return

        user_data[user_id]['money'] += amount
        bank_data[str(user_id)] -= amount
        save_bank_data(bank_data)

        update.message.reply_text(
            f'üíµ –í—ã –≤—ã–≤–µ–ª–∏ {amount} –º–æ–Ω–µ—Ç –∏–∑ –±–∞–Ω–∫–∞. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_data[user_id]["money"]} –º–æ–Ω–µ—Ç –Ω–∞ —Ä—É–∫–∞—Ö –∏ {bank_data[str(user_id)]} –º–æ–Ω–µ—Ç –≤ –±–∞–Ω–∫–µ.')

    except (IndexError, ValueError):
        update.message.reply_text('‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /izbank [—Å—É–º–º–∞]')


def id(update: Update, context: CallbackContext) -> None:
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∏–ª –±–æ—Ç
    user_id = update.message.reply_to_message.from_user.id if update.message.reply_to_message else update.message.from_user.id
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update.message.reply_text(f'User ID: {user_id}')


def vbank(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    user_id = user.id

    if user_id not in user_data:
        user_data[user_id] = {'money': 100}

    try:
        amount = int(context.args[0])
        if amount <= 0:
            update.message.reply_text('‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.')
            return
        if user_data[user_id]['money'] < amount:
            update.message.reply_text('üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.')
            return

        bank_data = load_bank_data()
        if str(user_id) not in bank_data:
            bank_data[str(user_id)] = 0

        user_data[user_id]['money'] -= amount
        bank_data[str(user_id)] += amount
        save_bank_data(bank_data)
        save_data()

        update.message.reply_text(
            f'üí∞ –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} –º–æ–Ω–µ—Ç –≤ –±–∞–Ω–∫. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_data[user_id]["money"]} –º–æ–Ω–µ—Ç –Ω–∞ —Ä—É–∫–∞—Ö –∏ {bank_data[str(user_id)]} –º–æ–Ω–µ—Ç –≤ –±–∞–Ω–∫–µ.')

    except (IndexError, ValueError):
        update.message.reply_text('‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /vbank [—Å—É–º–º–∞]')


def main() -> None:
    load_data()
    load_market()

    updater = Updater("Token")
    dispatcher = updater.dispatcher

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("kick", kick))
    dispatcher.add_handler(CommandHandler("ban", ban))
    dispatcher.add_handler(CommandHandler("unban", unban))
    dispatcher.add_handler(CommandHandler("mute", mute))
    dispatcher.add_handler(CommandHandler("unmute", unmute))
    dispatcher.add_handler(CommandHandler("roll_dice", roll_dice))
    dispatcher.add_handler(CommandHandler("flip_coin", flip_coin))
    dispatcher.add_handler(CommandHandler("guess_number", guess_number))
    dispatcher.add_handler(CommandHandler("everyone", everyone))
    dispatcher.add_handler(CommandHandler("ferma", farm))
    dispatcher.add_handler(CommandHandler("stats", user_info))
    dispatcher.add_handler(CommandHandler("prodavat", sell_item))
    dispatcher.add_handler(CommandHandler("rynok", show_market))
    dispatcher.add_handler(CallbackQueryHandler(buy_item, pattern='^buy_'))
    dispatcher.add_handler(CommandHandler("send", send_money))
    dispatcher.add_handler(CommandHandler("probit", probit))
    dispatcher.add_handler(CommandHandler("check", check))
    dispatcher.add_handler(CommandHandler("kazino", kazino))
    dispatcher.add_handler(CommandHandler("grabit", grabit))
    dispatcher.add_handler(CommandHandler("ruletka", kazino_X))
    dispatcher.add_handler(CommandHandler("give", give))
    dispatcher.add_handler(CommandHandler("izbank", izbank))
    dispatcher.add_handler(CommandHandler("vbank", vbank))
    dispatcher.add_handler(CommandHandler("bank", bank))
    dispatcher.add_handler(CommandHandler('id', id))
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()